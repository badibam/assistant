```yaml
custom_commands:
  intro:
    description: "Initialize Claude Code session with project rules and architecture"
    prompt: |
      # L'app a été créée avec l'architecture finale souhaitée, il est important de la respecter.

      # Quand je te demande de commit :
      - Tu commites SANS MENTIONNER CLAUDE dans le message de commit.

      # Tu vas lire TOUS les fichiers de doc :
      - README.md
      - CORE.md
      - TOOLS.md
      - UI.md
      - DATA.md

      # Tu vas également regarder les commits récents pour comprendre où en est le développement.

      # Règles d'or:
      - Ne fais jamais d'hypothèses sur ce que je pense ou ressens. Réponds factuellement sans interpréter mes intentions ou valider mes supposées opinions. Si je pose une question "pourquoi", c'est pour savoir pourquoi, pas pour remettre en cause ce que tu dis. Affirme-toi et assume tes choix s'il te plaît. N'hésite pas à me contredire. Vraiment.
      - Ne JAMAIS utiliser de mécanisme fallback sans valider explicitement avec moi
      - TOUJOURS vérifier les patterns dans la doc et / ou dans les autres fichiers avant d'implémenter une logique...
      - Commentaires et debug : toujours en anglais
      - Utilise SYSTEMATIQUEMENT le système de strings (cf CORE.md) : s.tool(), s.shared() : pas de 'string' hardcodée.
      - Tu es très patient et tu fais toutes les modifications nécessaires, dans les règles de l'art, pour arriver au résultat souhaité tout en respectant scrupuleusement les règles d'or.
    files:
      - "README.md"
      - "CORE.md"
      - "TOOLS.md"
      - "UI.md"
      - "DATA.md"

  improve:
    description: "Analyze implementation issues and create improvement documentation"
    prompt: |
      Je voudrais que tu récapitule tout ce qui, dans ton implémentation du plan, est apparu comme  :
      a) un défaut de documentation pas à jour
      b) un pattern que tu n'as pas compris du 1er coup
      c) un pattern que tu as oublié initialement d'implémenter
      d) un pattern que tu as cru initialement pour éviter

      L'idée est d'écrire ce qui t'aurait aidé à implémenter le plan de manière plus directe, et avec un code de meilleure qualité. Reprends bien tous le processus de manière exhaustive.
      Écris tout ça dans un fichier
    files:
      - "**/*"

  tool-impl-auto:
    description: "Implement new tooltype autonomously following established patterns"
    prompt: |
      Tu vas reagarder l'implémentation des tooltypes existants puis tu vas mettre en place le plan de création du nouveau tooltype de manière autonome, étape par étape, de façon patiente et structurée. tu fais toutes les étapes sans prendre de raccourci. au contraire, tu rentres dans les détails pour faire un travail propre et un code nickel chrome... En suivant tous les patterns établis.
    files:
      - "**/*"

  tool-impl-colab:
    description: "Implement new tooltype collaboratively with step-by-step validation"
    prompt: |
      On va implémenter le nouveau tooltype sur la base du fichier de spécification. Tu peux considérer que ce qui est dans les documents est établi. Tu vas quand me me poser des questions pour l'implémentation au fur et à mesure, 1 question à la fois. en donnant aussi ton avis à chaque fois.
    files:
      - "**/*"

  doc-update:
    description: "Update existing documentation based on new decisions"
    prompt: |
      Pour mettre à jour la doc tu vas :
      1) Évaluer le contenu de la doc existante au regard des nouvelles décisions : sections à modifier / supprimer
      2) Dans un second temps, ajouter les sections pertinentes liées aux nouvelles décisions. Uniquement avec les points qu'on a décidé ensemble, sans extrapoler sur le reste.
      3) Proposer une restructuration de la doc si ça te semble souhaitable.
      Je précise que toute la doc doit être compréhensible hors contexte de notre discussion. Et qu'elle est avant tout à destination d'une IA pour implémentation future.
    files:
      - "*.md"

  doc-create:
    description: "Create new detailed documentation file"
    prompt: |
      Tu vas créer un fichier détaillé qui reprend toutes les infos. Uniquement avec les points qu'on a décidé ensemble, sans extrapoler sur le reste.
      Je précise que toute la doc doit être compréhensible hors contexte de notre discussion. Et qu'elle est avant tout à destination d'une IA pour implémentation future.
    files:
      - "**/*"

  ask:
    description: "Ask targeted questions from general to specific with opinions"
    prompt: |
      Pose moi une série de questions à ce sujet, 1 question à la fois. Du + général au + spécifique. Et donne aussi ton avis à chaque fois.
    files:
      - "**/*"

  version-upgrade:
    description: "Complete version upgrade workflow (0.2)"
    prompt: |
      On passe à la version 0.2

      - modif versionName + versionCode dans build.gradle.kts
      - modif CURRENT_APP_VERSION dans AppVersionManager
      - commite (sans mentionner claude)
      - tag
      - build release
      - push develop + tag
      - écrire notes de version qui tiennent compte de tous les changements depuis version précédente, dans un fichier, pour correction par moi
      - release (gh) avec notes de version (fichier corrigé) et apk
      - suppression fichier notes de version
      - merge dans main pour refléter cette nouvelle version.
      - push main

      Pas d'emoji et sois précis mais simple pour les notes de version - et sans mentionner claude.
    files:
      - "build.gradle.kts"
      - "**/AppVersionManager*"
      - "**/*"
```
