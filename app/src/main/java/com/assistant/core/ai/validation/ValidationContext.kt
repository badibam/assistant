package com.assistant.core.ai.validation

import com.assistant.core.ai.data.DataCommand

/**
 * Context for AI action validation containing all information needed for the UI
 *
 * This context is generated by ValidationResolver and passed to the UI for display.
 * For persistence simplicity, only aiMessageId is stored in DB - the full context
 * is reconstructed on app restart by re-running ValidationResolver.shouldValidate()
 *
 * @param aiMessageId ID of the AI message containing the actions (for reconstruction after app restart)
 * @param actions ALL actions to execute (both validated and non-validated)
 * @param verbalizedActions Human-readable descriptions with validation reasons
 */
data class ValidationContext(
    val aiMessageId: String,
    val actions: List<DataCommand>,
    val verbalizedActions: List<VerbalizedAction>
)

/**
 * Verbalized action with validation metadata
 *
 * Each action in the validation UI is displayed with:
 * - Its human-readable description (e.g., "Création de la zone \"Santé\"")
 * - A warning icon if validated by CONFIG (sensitive action)
 * - The validation reason explaining why validation is required
 *
 * Actions with validationReason = null are displayed without reason (review list)
 *
 * @param actionId ID of the DataCommand this describes
 * @param description Human-readable action description (substantive form)
 * @param requiresWarning true if validated by CONFIG (app/zone/tool) - shows orange warning icon
 * @param validationReason Reason for validation (null if action doesn't require validation by itself)
 */
data class VerbalizedAction(
    val actionId: String,
    val description: String,
    val requiresWarning: Boolean,
    val validationReason: String?
)

/**
 * Triggers that can require validation in the hierarchy
 *
 * Used internally by ValidationResolver to track which config level
 * triggered validation for an action. This determines the validation
 * reason displayed to the user.
 *
 * Hierarchy (highest to lowest priority):
 * 1. APP_CONFIG - Application-level config
 * 2. ZONE_CONFIG - Zone-level config
 * 3. TOOL_CONFIG - Tool instance-level config
 *
 * Session-level and AI-level validation don't use triggers (handled separately)
 */
enum class ValidationTrigger {
    APP_CONFIG,      // Validation triggered by app configuration
    ZONE_CONFIG,     // Validation triggered by zone configuration
    TOOL_CONFIG      // Validation triggered by tool instance configuration
}
