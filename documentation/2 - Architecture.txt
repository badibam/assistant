**ARCHITECTURE ASSISTANT PERSONNEL - SYNTHÈSE**

# VISION GLOBALE

**Concept central** : Un Coordinateur orchestre tous les échanges entre User, App et IA via une interface de commandes JSON universelle.

**Principe clé** : Un seul processus nécessitant cohérence ou modification des données actif à la fois.

---

# MODÈLE DE DONNÉES

## Hiérarchie
```
Zones (conteneurs thématiques)
  └── Instances d'outils (configurations)
        └── Données (enregistrements)
```

## Tables essentielles
- `zones` → Conteneurs thématiques
- `tool_instances` → Configurations avec `config_json` + `config_metadata_json`
- `[type]_data` → Une table de données par type d'outil (ex: `tracking_data`)

## Philosophie
- **Immutabilité** : Les enregistrements copient les valeurs (pas de références, sauf leur tool instance id)
- **Schémas JSON** : Validation et description via schémas JSON standards
- **Config centralisée** : Pour les instances : tout dans `config_json`, pas de tables auxiliaires

---

# SCHEMA JSON

Les données utilisent des schémas JSON standards pour la validation et la description, permettant à l'IA de comprendre la structure sans accéder aux données elles-mêmes.

# LE COORDINATEUR = Machine à états centralisée

## États possibles
- `idle` - Attente
- `dialogue_ia` - Discussion en cours
- `operation_en_cours` - Traitement actif
- `validation_requise` - Attente confirmation
- etc. (extensible)

## Gestion des priorités
1. Actions User (max)
2. Réponses IA (haute)
3. Tâches auto (basse)

## Gestion des interruptions
- **Phase critique** : Attente obligatoire
- **Phase interruptible** : Confirmation ("Interrompre? Devra recommencer")

## Ce qui passe par le coordinateur
- Modification de données
- Actions qui utilisent la db pour leur cohérence
- Session dialogue IA
- ...

## Ce qui ne passe pas par le coordinateur
- Navigation pure : consultation données, changement d'écran
- Processus passifs : monitoring capteurs, etc.




# INTERFACE DE COMMANDE

## Sources d'actions (initiated_by)
- `user` - via interaction UI
- `ai` - via commande
- `scheduler` - Tâche programmée
- `trigger` - Événement auto
- `cascade` - Conséquence d'une autre commande

## Exemple d'échange IA <-> App
**Commande** :
```json
[{
  "action": "modify->tools->tracking->add_item",
  "params": {...}
}]
```

**Réponse** :
```json
[{
  "command_index": 0,
  "status": "success|error|...",
  "requested_data": {...},
  "message": "..."
}]
```








